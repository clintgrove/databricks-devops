name: Deploy Databricks Secret Scope

on:
  push:
    branches:
      - fixsecretcreate
  workflow_dispatch:

permissions:
  id-token: write 
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # - name: Install Databricks CLI (v0.200+)
      #   run: |
      #     # Download and install the new CLI
      #     curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | bash
      
      #     # Add to PATH
      #     echo "$HOME/.databricks/bin" >> $GITHUB_PATH
      
      #     # Confirm it's the new CLI (v0.200+)
      #     ~/.databricks/bin/databricks version
      
      - uses: databricks/setup-cli@main

      - name: Azure Login + Databricks AAD Auth
        run: |
            export DATABRICKS_HOST=$DATABRICKS_HOST
            export DATABRICKS_ACCOUNT_ID=$DATABRICKS_ACCOUNT_ID
            export DATABRICKS_CLIENT_ID=$DATABRICKS_CLIENT_ID
            export DATABRICKS_CLIENT_SECRET=$DATABRICKS_CLIENT_SECRET

            response=$(curl --silent --request POST \
            --url https://accounts.azuredatabricks.net/oidc/accounts/$DATABRICKS_ACCOUNT_ID/v1/token \
            --user "$DATABRICKS_CLIENT_ID:$DATABRICKS_CLIENT_SECRET" \
            --data 'grant_type=client_credentials&scope=all-apis')
            DATABRICKS_TOKEN=$(echo $response | jq -r '.access_token')
            echo -e "[DEFAULT]\nhost = $DATABRICKS_HOST\ntoken = $DATABRICKS_TOKEN" > ~/.databrickscfg
            echo "Testing Databricks CLI connection..."
            databricks workspace ls
        env:
          DATABRICKS_HOST: "https://adb-2262937393579434.14.azuredatabricks.net"
          DATABRICKS_CLIENT_SECRET: ${{ secrets.ELYON_DBX_TOKEN_PROD }}
          DATABRICKS_CLIENT_ID: "557fa95a-5c11-4b0c-987a-d38b6633b07b" 
          DATABRICKS_ACCOUNT_ID: "6f11c974-e6ce-45aa-9df3-cb8d50d74416"

      
      # - name: Azure Login
      #   uses: Azure/login@v2.2.0
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: "3be2ce56-4a5f-4034-88d7-2953d1819ed3"
      
      # - name: Azure Login + Databricks AAD Auth
      #   env:
      #     ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #     ARM_SUBSCRIPTION_ID: "3be2ce56-4a5f-4034-88d7-2953d1819ed3"
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     DATABRICKS_TOKEN: ${{ secrets.ELYON_DBX_TOKEN_PROD }}
      #     DATABRICKS_BUNDLE_ENV: prod
      #   run: |
      #     az login --service-principal \
      #       --username $ARM_CLIENT_ID \
      #       --tenant $ARM_TENANT_ID \
      #       --password $AZURE_CLIENT_SECRET
      
      #     export DATABRICKS_HOST="https://https://adb-1055291633315799.19.azuredatabricks.net/"
      
      #     databricks auth login --host $DATABRICKS_HOST


        
        
      # - name: Configure Databricks CLI
      #   env:
      #     DATABRICKS_HOST: https://adb-1432846341870043.3.azuredatabricks.net
      #     DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_DEV }}
        
      #   run: |
      #       databricks configure --token <<EOF
      #       $DATABRICKS_HOST
      #       $DATABRICKS_TOKEN
      #       EOF

      - name: Create Key Vault-Backed Secret Scope
        run: |
          databricks secrets create-scope --scope dbxsecrets1 \
            --scope-backend-type AZURE_KEYVAULT \
            --resource-id /subscriptions/3be2ce56-4a5f-4034-88d7-2953d1819ed3/resourceGroups/commonResources/providers/Microsoft.KeyVault/vaults/keyvault-forgeneraluse \
            --dns-name https://keyvault-forgeneraluse.vault.azure.net \
            --initial-manage-principal users

