parameters:
- name: stageId
  type: string
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string
- name: databricksHost
  type: string  
- name: databricksClientId
  type: string
- name: databricksClientSecret
  type: string

jobs:
- deployment: ${{ parameters.stageId }}
  displayName: "Deploy Databricks Notebooks to ${{ parameters.env }}"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
            addToPath: true

        - script: |
            python -m pip install --upgrade pip
            pip install databricks-cli
          displayName: 'Install Databricks CLI'

        - script: |
            export DATABRICKS_HOST=${{ parameters.databricksHost }}
            export DATABRICKS_CLIENT_ID=${{ parameters.databricksClientId }}
            export DATABRICKS_CLIENT_SECRET=${{ parameters.databricksClientSecret }}
            databricks workspace ls
          displayName: 'Configure Databricks CLI with Client Credentials'


        # - task: AzureCLI@2
        #   inputs:
        #     azureSubscription: ${{ parameters.serviceConnection }}
        #     useGlobalConfig: true
        #     scriptType: bash
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       export DATABRICKS_HOST= ${{ parameters.databricksHost }}
        #       databricks workspace list /Users


        # - script: |
        #     echo "Testing Databricks CLI authentication..."
        #     DATABRICKS_CONFIG_FILE=~/.databrickscfg databricks workspace ls
        #   displayName: 'Testing Databricks CLI module'
        #   env:
        #     DATABRICKS_HOST: ${{ parameters.databricksHost }}
        #     DATABRICKS_CLIENT_ID: ${{ parameters.databricksClientId }}
        #     DATABRICKS_CLIENT_SECRET: ${{ parameters.databricksClientSecret }}

        # - script: |
        #     databricks workspace import_dir $(Build.SourcesDirectory)/${{ parameters.notebooksPath }} /live --overwrite
        #   displayName: 'Deploy files to Databricks workspace'
        #   env:
        #     DATABRICKS_HOST: $(DATABRICKS_HOST)
        #     DATABRICKS_CLIENT_ID: $(DATABRICKS_CLIENT_ID)
        #     DATABRICKS_CLIENT_SECRET: $(DATABRICKS_CLIENT_SECRET)





        # - script: |
        #     mkdir -p ~/.databricks
        #     touch ~/.databrickscfg
        #     echo "[DEFAULT]" > ~/.databrickscfg
        #     echo "host = $DATABRICKS_HOST" >> ~/.databrickscfg
        #     echo "client_id = $DATABRICKS_CLIENT_ID" >> ~/.databrickscfg
        #     echo "client_secret = $DATABRICKS_CLIENT_SECRET" >> ~/.databrickscfg
        #     echo "Databricks CLI configuration file content:"
        #     cat ~/.databrickscfg
        #   displayName: 'Configure Databricks CLI'
        #   env:
        #     DATABRICKS_HOST: ${{ parameters.databricksHost }}
        #     DATABRICKS_CLIENT_ID: ${{ parameters.databricksClientId }}
        #     DATABRICKS_CLIENT_SECRET: ${{ parameters.databricksClientSecret }}