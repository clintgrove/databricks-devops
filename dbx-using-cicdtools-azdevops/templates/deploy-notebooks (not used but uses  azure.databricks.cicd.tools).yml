parameters:
- name: stageId
  type: string
- name: dependson
  type: object
  default: []
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string

jobs:
- deployment: ${{ parameters.stageId }} # Parameterized job name for uniqueness
  displayName: "Deploy Databricks Notebooks to ${{ parameters.env }}"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Install Azure CLI (this is for self-hosted agents)
        # - task: PowerShell@2
        #   displayName: "Install Azure CLI"
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       echo "Installing Azure CLI..."
        #       Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
        #       Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet /norestart' -Wait
        #       $env:Path += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"

        # # Verify installations
        # - task: PowerShell@2
        #   displayName: "Verify Azure CLI"
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       az --version

        - checkout: self
          displayName: "Checkout repository"

        - task: AzureCLI@2
          displayName: "GetToken Copy Notebooks"
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: pscore #powershell # Use Windows PowerShell
            scriptLocation: inlineScript
            inlineScript: |
              az config set extension.use_dynamic_install=yes_without_prompt
              az config set extension.dynamic_install_allow_preview=true

              $databricksWorkspace = (az resource list --resource-group ${{ parameters.resourceGroupName }} --query "[?type=='Microsoft.Databricks/workspaces'].id" --output tsv)

              $databricksWorkspaceInfo = (az databricks workspace show --ids $databricksWorkspace --output json | ConvertFrom-Json)

              $bearerToken = & "$(Build.Repository.LocalPath)/dbx-using-cicdtools-azdevops/scripts/DatabricksToken.ps1" -databricksworkspaceResourceId $databricksWorkspaceInfo.id -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl

              Install-Module -Name azure.databricks.cicd.tools -Force -Scope CurrentUser

              Import-DatabricksFolder -BearerToken $bearerToken -Region $databricksWorkspaceInfo.location -LocalPath "$(Build.Repository.LocalPath)/${{ parameters.notebooksPath }}" -DatabricksPath "/live" -Clean
              Import-Module -Name azure.databricks.cicd.tools