parameters:
- name: stageId
  type: string
- name: dependson
  type: object
  default: []
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string
- name: databricksHost
  type: string
- name: databricksToken
  type: string  

jobs:
- deployment: ${{ parameters.stageId }} # Parameterized job name for uniqueness
  displayName: "Deploy Databricks Notebooks to ${{ parameters.env }}"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Install Azure CLI (this is for self-hosted agents)
        - task: PowerShell@2
          displayName: "Install Azure CLI"
          inputs:
            targetType: 'inline'
            script: |
              echo "Installing Azure CLI..."
              Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
              Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet /norestart' -Wait
              $env:Path += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"

        # Verify installations
        - task: PowerShell@2
          displayName: "Verify Azure CLI"
          inputs:
            targetType: 'inline'
            script: |
              az --version

        - checkout: self
          displayName: "Checkout repository"

        - task: PowerShell@2
          displayName: "Install Databricks CLI"
          inputs:
            targetType: 'inline'
            script: |
              if (-Not (Get-Command databricks -ErrorAction SilentlyContinue)) {
                  Write-Host "Databricks CLI not found. Installing..."
                  pip install databricks-cli
              } else {
                  Write-Host "Databricks CLI is already installed."
              }


        - task: PowerShell@2
          displayName: "Configure Databricks CLI"
          env:
            DATABRICKS_HOST: ${{ parameters.databricksHost }}
            DATABRICKS_TOKEN: ${{ parameters.databricksToken }}
          inputs:
            targetType: 'inline'
            script: |
              echo "Setting up Databricks CLI..."
              $configPath = "$env:USERPROFILE\.databricks-config"
              Set-Content -Path $configPath -Value @"
              [DEFAULT]
              host = $env:DATABRICKS_HOST
              token = $env:DATABRICKS_TOKEN
              "@
              
              if (Test-Path $configPath) {
                  Write-Host "Databricks CLI configuration file created successfully."
              } else {
                  Write-Error "Failed to create Databricks CLI configuration file."
                  exit 1
              }

        - task: PowerShell@2
          displayName: "Validate Databricks CLI Configuration"
          inputs:
            targetType: 'inline'
            script: |
              echo "Validating Databricks CLI configuration..."
              databricks workspace ls /
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Databricks CLI validation failed. Please check the configuration."
                  exit 1
              }
              echo "Databricks CLI validation successful."

        - task: PowerShell@2
          displayName: "Upload Notebooks via Databricks CLI"
          inputs:
            targetType: 'inline'
            script: |
              echo "Uploading notebooks to Databricks workspace..."
              databricks workspace import-dir --overwrite "$(Build.Repository.LocalPath)/${{ parameters.notebooksPath }}" "/live"