parameters:
- name: stageId
  type: string
- name: dependson
  type: object
  default: []
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string

jobs:
- deployment: ${{ parameters.stageId }}
  displayName: "Deploy Databricks Notebooks to ${{ parameters.env }}"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Install PowerShell Core (pwsh) and Azure CLI
        - task: PowerShell@2
          displayName: "Install PowerShell Core and Azure CLI"
          inputs:
            targetType: 'inline'
            script: |
              # echo "Installing PowerShell Core..."
              # Invoke-WebRequest -Uri https://github.com/PowerShell/PowerShell/releases/download/v7.3.6/PowerShell-7.3.6-win-x64.msi -OutFile .\PowerShell.msi
              # Start-Process msiexec.exe -ArgumentList '/I PowerShell.msi /quiet /norestart' -Wait

              echo "Installing Azure CLI..."
              Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
              Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet /norestart' -Wait

              # Update PATH for PowerShell Core and Azure CLI
              #[System.Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Program Files\PowerShell\7;C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin", [System.EnvironmentVariableTarget]::Machine)
              $env:Path += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
              
        # Verify installations
        - task: PowerShell@2
          displayName: "Verify PowerShell Core and Azure CLI"
          inputs:
            targetType: 'inline'
            script: |
              # echo "Verifying PowerShell Core (pwsh)..."
              # if (Test-Path "C:\Program Files\PowerShell\7\pwsh.exe") {
              #   & "C:\Program Files\PowerShell\7\pwsh.exe" -Command "$PSVersionTable"
              # } else {
              #   Write-Error "PowerShell Core (pwsh) is not installed or not found in the expected path."
              # }

              echo "Verifying Azure CLI..."
              az --version

        - checkout: self
          displayName: "Checkout repository"

        - task: AzureCLI@2
          displayName: "GetToken Copy Notebooks"
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: powershell # Use Windows PowerShell
            scriptLocation: inlineScript
            inlineScript: |
              # Set Azure CLI to use dynamic installs
              az config set extension.use_dynamic_install=yes_without_prompt
              az config set extension.dynamic_install_allow_preview=true

              # Get Databricks workspace ID
              $databricksWorkspace = (az resource list --resource-group ${{ parameters.resourceGroupName }} --query "[?type=='Microsoft.Databricks/workspaces'].id" --output tsv)

              # Get Databricks workspace details
              $databricksWorkspaceInfo = (az databricks workspace show --ids $databricksWorkspace --output json | ConvertFrom-Json)

              # Get Databricks access token (replace with your logic)
              $bearerToken = & "$(Build.Repository.LocalPath)/dbx-using-cicdtools-azdevops/scripts/DatabricksToken.ps1" -databricksworkspaceResourceId $databricksWorkspaceInfo.id -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl

              # Install azure.databricks.cicd.tools module
              Install-Module -Name azure.databricks.cicd.tools -Force -Scope CurrentUser

              # Get Git repository path for Notebooks then deploy to Databricks workspace to allocated location
              Import-DatabricksFolder -BearerToken $bearerToken -Region $databricksWorkspaceInfo.location -LocalPath "$(Build.Repository.LocalPath)/${{ parameters.notebooksPath }}" -DatabricksPath "/live" -Clean
              Import-Module -Name azure.databricks.cicd.tools

        - task: PowerShell@2
          displayName: "Debug Environment Variables"
          inputs:
            targetType: 'inline'
            script: |
              Get-ChildItem Env: