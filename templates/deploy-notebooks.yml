parameters:
- name: stageId
  type: string
- name: dependson
  type: object
  default: []
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string

jobs:
- deployment: ${{ parameters.stageId }} # Parameterized job name for uniqueness
  displayName: "Deploy Databricks Notebooks to ${{ parameters.env }}"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          displayName: "Checkout repository"

        - task: AzureCLI@2
          displayName: "Set up Azure CLI"
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
                # Set Azure CLI to use dynamic installs
                az config set extension.use_dynamic_install = yes_without_prompt

                # Get Databricks workspace ID
                $databricksWorkspace = (az resource list --resource-group ${{ parameters.resourceGroupName }} --query "[?type=="Microsoft.Databricks/workspaces"]" | ConvertFrom-Json)[0]

                # Get Databricks workspace details
                $databricksWorkspaceInfo = (az databricks workspace show --ids $databricksWorkspace.id | ConvertFrom-Json)

                # Get Databricks access token (replace with your logic)
                $bearerToken = $(Build.Repository.LocalPath)/CICD/scripts/DatabricksToken.ps1 -databricksworkspaceResourceId $databricksWorkspaceInfo.id -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl

                # Install azure.databricks.cicd.tools module
                Install-Module -Name azure.databricks.cicd.tools -Force -Scope CurrentUser

                # Import modules
                Import-Module -Name azure.databricks.cicd.tools
                Import-DatabricksFolder -BearerToken $bearerToken -Region $databricksWorkspaceInfo.location -LocalPath $(Build.Repository.LocalPath)/$(parameters.notebooksPath) -DatabricksPath "/live" -Clean