parameters:
- name: stageId
  type: string
- name: dependson
  type: object
  default: []
- name: env
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: serviceConnection
  type: string
- name: notebooksPath
  type: string

jobs:
- deployment: DatabricksNotebookShiftDeployment
  displayName: "Deploy Databricks Notebooks"
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: Checkout@v2
          displayName: "Checkout repository"

        - task: AzureCLI@2
          displayName: "Set up Azure CLI"
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              # Set Azure CLI to use dynamic installs
              az config set extension.use_dynamic_install=yes_without_prompt

              # Get Databricks workspace ID
              databricksWorkspace=$(az resource list --resource-group ${{ parameters.resourceGroupName }} --query "[?type=='Microsoft.Databricks/workspaces'].id" --output tsv)

              # Get Databricks workspace details
              databricksWorkspaceInfo=$(az databricks workspace show --ids $databricksWorkspace --output json)

              # Get Databricks access token (replace with your logic)
              bearerToken=$(./scripts/DatabricksToken.sh -databricksworkspaceResourceId $(echo $databricksWorkspaceInfo | jq -r '.id') -databricksWorkspaceUrl $(echo $databricksWorkspaceInfo | jq -r '.workspaceUrl'))

              # Install azure.databricks.cicd.tools module
              pwsh -Command "Install-Module -Name azure.databricks.cicd.tools -Force -Scope CurrentUser"

              # Import modules and deploy notebooks
              pwsh -Command "Import-Module -Name azure.databricks.cicd.tools; Import-DatabricksFolder -BearerToken $bearerToken -Region $(echo $databricksWorkspaceInfo | jq -r '.location') -LocalPath ${{ parameters.notebooksPath }} -DatabricksPath '/live' -Clean"
